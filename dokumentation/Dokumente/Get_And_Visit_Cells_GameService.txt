def get_and_visit_cells(self, player: Player, action: Action)
        -> List[Tuple[int, int]]:
    visited_cells = []
    GameService.change_player_status_by_action(player, action)
    horizontal_multiplier, vertical_multiplier = \
        GameService.get_horizontal_and_vertical_multiplier(player)

    for i in range(1, player.speed + 1):
        visited_cells.append((player.x + i * horizontal_multiplier,
                              player.y + i * vertical_multiplier))

    # Gap every sixth move, so take only first and last coordinate
    if self.turn.turn_ctr % 6 == 0 and len(visited_cells) > 1:
        visited_cells = [visited_cells[0], visited_cells[-1]]

    visited_cells_result = []
    for (x, y) in visited_cells:
        if x not in range(self.game.width) or y not in range(self.game.height):
            self.set_player_inactive(player)
            break
        player.x = x
        player.y = y
        visited_cells_result.append((x, y))
        if self.game.cells[y][x].players is None \
                or len(self.game.cells[y][x].players) == 0:
            self.game.cells[y][x].players = [player]
        else:
            self.game.cells[y][x].players.append(player)

    return visited_cells_result